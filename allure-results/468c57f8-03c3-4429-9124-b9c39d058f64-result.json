{"name": "test_login_valido", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7ccb13d85+79397]\n\tGetHandleVerifier [0x0x7ff7ccb13de0+79488]\n\t(No symbol) [0x0x7ff7cc8bc0fa]\n\t(No symbol) [0x0x7ff7cc912fd6]\n\t(No symbol) [0x0x7ff7cc91328c]\n\t(No symbol) [0x0x7ff7cc966537]\n\t(No symbol) [0x0x7ff7cc93b1df]\n\t(No symbol) [0x0x7ff7cc963344]\n\t(No symbol) [0x0x7ff7cc93af73]\n\t(No symbol) [0x0x7ff7cc9041b1]\n\t(No symbol) [0x0x7ff7cc904f43]\n\tGetHandleVerifier [0x0x7ff7ccdde1ed+3005069]\n\tGetHandleVerifier [0x0x7ff7ccdd831d+2980797]\n\tGetHandleVerifier [0x0x7ff7ccdf7e0d+3110573]\n\tGetHandleVerifier [0x0x7ff7ccb2d6de+184190]\n\tGetHandleVerifier [0x0x7ff7ccb3516f+215567]\n\tGetHandleVerifier [0x0x7ff7ccb1c974+115220]\n\tGetHandleVerifier [0x0x7ff7ccb1cb29+115657]\n\tGetHandleVerifier [0x0x7ff7ccb03268+11016]\n\tBaseThreadInitThunk [0x0x7ffe9de5e8d7+23]\n\tRtlUserThreadStart [0x0x7ffe9eddc34c+44]", "trace": "self = <tests_login.test_01_login_valido.TestLoginValido object at 0x0000023B60FC3250>\n\n    def test_login_valido(self):\n        self.driver = conftest.driver\n        login_page = LoginPage()\n        home_page = HomePage()\n        login_page.fazer_login(\"geysonsilva@teste.com\",\"Abcd1234\")\n    \n        # Verifica se o login foi realizado\n        home_page.verificar_login_com_sucesso()\n    \n        # Faz o processo de sair da PÃ¡gina\n        WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(\n            (By.CSS_SELECTOR, \".my-2\"))).click()\n    \n        # Certifica que o elemento foi encontrado.\n>       mensagem_elemento_existe_sucesso = WebDriverWait(self.driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//button[@data-testid='logout'][contains(.,'Logout')]\"))).text\n\ntests_login\\test_01_login_valido.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e223206651a50c5d34de42e725d4906d\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x0000023B61023740>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7ccb13d85+79397]\nE       \tGetHandleVerifier [0x0x7ff7ccb13de0+79488]\nE       \t(No symbol) [0x0x7ff7cc8bc0fa]\nE       \t(No symbol) [0x0x7ff7cc912fd6]\nE       \t(No symbol) [0x0x7ff7cc91328c]\nE       \t(No symbol) [0x0x7ff7cc966537]\nE       \t(No symbol) [0x0x7ff7cc93b1df]\nE       \t(No symbol) [0x0x7ff7cc963344]\nE       \t(No symbol) [0x0x7ff7cc93af73]\nE       \t(No symbol) [0x0x7ff7cc9041b1]\nE       \t(No symbol) [0x0x7ff7cc904f43]\nE       \tGetHandleVerifier [0x0x7ff7ccdde1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff7ccdd831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff7ccdf7e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff7ccb2d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff7ccb3516f+215567]\nE       \tGetHandleVerifier [0x0x7ff7ccb1c974+115220]\nE       \tGetHandleVerifier [0x0x7ff7ccb1cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff7ccb03268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffe9de5e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe9eddc34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1756319359767, "stop": 1756319371688, "uuid": "5b961874-f6bd-4a4c-922b-bde385b7c56b", "historyId": "c256af473372999a0923fad251923889", "testCaseId": "c256af473372999a0923fad251923889", "fullName": "tests_login.test_01_login_valido.TestLoginValido#test_login_valido", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests_login"}, {"name": "suite", "value": "test_01_login_valido"}, {"name": "subSuite", "value": "TestLoginValido"}, {"name": "host", "value": "notebooktonygeyson"}, {"name": "thread", "value": "23072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests_login.test_01_login_valido"}], "titlePath": ["tests_login", "test_01_login_valido.py", "TestLoginValido"]}